program
    = { declaration }
    ;

declaration
    = variable_declaration
    | function_declaration
    ;

variable_declaration
    = { specifier } identifier [ "=" expression ] ";"
    ;

function_declaration
    = { specifier } identifier "(" param_list ")" ( block | ";" )
    ;

declarator
    = "*" declarator
    | direct_declarator
    ;

direct_declarator
    = simple_declarator [ declarator_suffix ]
    ;

declarator_suffix
    = param_list
    | { "[" constant "]"}
    ;

param_list
    = "void" | type_specifier identifier { "," "int" identifier }
    ;

simple_declarator
    = identifier | "(" declarator ")"
    ;

block
    = "{" { block_item } "}"
    ;

block_item
    = statement
    | declaration
    ;

declaration
    = type_specifier identifier [ "=" expression ]
    ;

statement
    = "return" expression ";"
    | expression ";"
    | "if" "(" expression ")" statement [ "else" statement ]
    | block
    | "break" ";"
    | "continue" ";"
    | "while" "(" expression ")" statement
    | "do" statement "while" "(" expression ")" ";"
    | "for" "(" for_init [ expression ] ";" [ expression ] ")" statement
    | ";"
    ;

for_init
    = variable_declaration
    | [ expression ] ";"
    ;

expression
    = factor
    | expression binary_operator expression
    | expression "?" expression ":" expression
    ;

factor
    = integer_constant
    | identifier
    | unary_operator factor
    | "(" expression ")"
    | identifier "(" [ argument_list ] ")"
    ;

argument_list
    = expression { "," expression }
    ;

member_specifier
    = access_specifier
    | specifier
    ;

specifier
    =  type_specifier
    | storage_class
    | type_qualifier
    ;

access_specifier
    = "public" | "protected" | "private"
    ;

type_qualifier
    = "const" | "atomic"
    ;

storage_class
    = "extern" | "static" | "thread"
    ;

type_specifier
    = "int" | "float" | "char" | "string" | "void"
    ;

assignment_operator
    = "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "^=" | "|="
    ;

binary_operator
    = "-" | "+" | "*" | "/" | "%" | "&&" | "||" | "==" | "!=" | "<" | "<=" | ">" | ">=" | "="
    ;

unary_operator
    = "&" | "*" | "+" | "-" | "~" | "!"
    ;

constant
    = "int" | "float" | "char" | "string"
    ;

identifier
    = ( letter | "_" ) { alphanumeric }
    ;

integer_constant
    = digit { digit }
    ;

alphanumeric
    = letter | digit
    ;

digit
    = "0".."9"
    ;

letter
    = "a".."z" | "A".."Z"
    ;
